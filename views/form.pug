doctype html
html 
  head 
    include includes/head.pug
    title The Power of Without
    link(rel='stylesheet', href='https://unpkg.com/leaflet@1.6.0/dist/leaflet.css')
    script(src='https://unpkg.com/leaflet@1.6.0/dist/leaflet.js')
    script(src="src/GIBSMetadata.js")
    script(src="src/GIBSLayer.js")
    link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/0.4.2/leaflet.draw.css")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/0.4.2/leaflet.draw.js")
    script(src="https://unpkg.com/esri-leaflet@2.5.1/dist/esri-leaflet.js"
    integrity="sha512-q7X96AASUF0hol5Ih7AeZpRF6smJS55lcvy+GLWzJfZN+31/BQ8cgNx2FGF+IQSA4z2jHwB20vml+drmooqzzQ=="
    crossorigin="")


    link(rel="stylesheet" href="/dist/css/form.css")
  body 
    - let activeTab = 2;

    include includes/nav-black.pug
    
    if (modalData)
      #modal-div(class=`${modalClass}`)
        .modal-description
          p #{modalData.description}
        .modal-items-description
          each icon in modalData.icons
            .modal-item 
              .modal-icon(style=`background-image:url(${icon.image})`)
              .modal-icon-description          
                p #{icon.description}             
        a(href=`${redirectUrl}` id="continue-button") Continue

    if (previousModalClass)
     #previous-modal-div(class=`${previousModalClass}`)  
      .previous-modal-close-button(onclick="closeModal()")
      .previous-modal-description 
        form(action = "/api/get-settlement" method = "POST") 
          each field in previousModalData
            .fill-in-level-row-item
              label(for = field.name + "-" + index)= field.label
              br          
            if field.type == "text"  
              input(id=field.id name = field.name type = "text" placeholder = field.placeholder) 
              br
              br
          input.button.is-black(id="previous-continue-button" style="position:relative;left:30%;width:100px" type="submit" value="Continue")

      
    .columns.is-variable.is-8

      if sectionData.header=="update-settlement"     
        #sidebar.nav-column
          .nav
            a.active(onclick = "goToSection(2)") Populace
            br
            a(onclick = "goToSection(1)") Architecture
            br
            a(onclick = "goToSection(0)") Site
        
      .middle-column#content         
        form(action = url method = "POST" onsubmit="validateForm()")
          //- Autofill questions from JSON object passed
          if sectionData.header=="fill-in-form"                     
                .fill-in-row
                  each question, line in sectionData.sections
                    if line < 2
                      .fill-in-level-row-item
                        .fill-in-level-row-title                  
                          label(for = question.name + "-" + index)=question.label
                        br
                        .fill-in-level-row-input
                          if question.type == "text"    
                            if question.disabled
                              input(name = question.name type = question.type readonly value = question.value required)
                            else
                              input(name = question.name type = question.type placeholder = question.value required)                        
                          
                each question, line in sectionData.sections 
                  if line>1
                    br
                    .fill-in-level-row-item
                      .fill-in-level-row-title                  
                        label(for = question.name + "-" + index)=question.label
                      br
                      .fill-in-level-row-input
                        if question.type == "coords"
                          input(id = "coords" name = question.name type = "text" placeholder = question.value required)   
                        else if question.type == "area"
                          input(id ="area" name = question.name type = "text" placeholder = question.value required)  
                        else if question.type == "text"    
                          if question.disabled
                            input(name = question.name type = question.type readonly value = question.value required)
                          else
                            input(name = question.name type = question.type placeholder = question.value required)        
                        else if question.type == "radio" || question.type == "checkbox"
                          each val, index in question.options
                            if question.type == "radio"
                              input(type = question.type name = question.name id = question.name + "-" + index value = val checked = (val == question.value) required)
                            else 
                              input(type = question.type name = question.name id = question.name + "-" + index val = "Privacy" checked = false required)
                            label( style="font-size:0.8rem" for = question.name + "-" + index)= val
                            br
                        else if question.type == "range"
                          .range
                            label(for = question.name)= question.options[0]
                            input(type = "range" min = "1" max = `${question.options.length}` value = (question.value ? question.value : null) name = question.name id = question.name)
                            label(for = question.name)= question.options[question.options.length - 1]
                          br


          else if sectionData.header=="update-settlement"
            each section, index in sectionData.sections
              br
              //- section(class = (index == 0 ? "" : "is-hidden"))  
              section(class = (index))                   
                each category, index in section.subsections        
                  .level-category
                    .level-left-category 
                      .level-item-header
                        label(for = "")= category.label               
                      .level-middle
                        each question, j in category.questions
                          .level-item-question
                            if question.type =="range"
                              .range-level-items
                                .top-level-items
                                  .level-item-left
                                    .label
                                      label(for = "hilz")= question.name 
                                    .question-info
                                      if question.info
                                        //- .info-button.level-item(data-label = `${category.label}` data-info = `${question.info}`)
                                        //- i.fas.fa-info-circle
                                        .alert-button(onclick=`showInfo("${question.info}")`)       
                                  br
                                  .right-level-items
                                    .level-item-right
                                      .comment-button(data-name = `${question.name}` data-email = `${email}`)
                                        //- i.fa-comment.fas
                                      .link-button(data-name = `${question.name}` data-email = `${email}`)
                                        //- i.fas.fa-link
                                      .chat-button(data-name = `${question.name}` data-email = `${email}`)   
                                .range
                                  .range-options
                                    each option in question.options
                                      label(for = question.name)= option
                                  input(type = "range"  min = "0" max = "10" value = (question.value ? question.value : null) name = question.name id = question.name)
                            else if question.type=="double-range"
                              .range-level-items
                                .top-level-items
                                  .level-item-left
                                    .label
                                      label(for = "hilz")= question.name 
                                    .question-info
                                      if question.info
                                        //- .info-button.level-item(data-label = `${category.label}` data-info = `${question.info}`)
                                        //- i.fas.fa-info-circle
                                        .alert-button(onclick=`showInfo("${question.info}")`)        
                                  br
                                  .right-level-items
                                    .level-item-right
                                      .comment-button(data-name = `${question.name}` data-email = `${email}`) 
                                        //- i.fa-comment.fas
                                      .link-button(data-name = `${question.name}` data-email = `${email}`)
                                        //- i.fas.fa-link
                                      .chat-button(data-name = `${question.name}` data-email = `${email}`)  
                                .range
                                  .range-options
                                    label(for = question.name)= question.options[0]
                                    label(for = question.name)= question.options[1]  
                                  input(type = "range"  min = "0" max = "10" value = (question.value!=null ? question.value[0] : null) name = question.name id = question.name)                                                      
                                  .range-options
                                    label(for = question.name)= question.options[2]
                                    label(for = question.name)= question.options[3]  
                                  input(type = "range"  min = "0" max = "10" value = (question.value!=null ? question.value[1] : null) name = question.name id = question.name)    
                            else                 
                              .left-level-items
                                .level-item-left
                                  .label
                                    label(for = "hilz")= question.name 
                                  .question-info
                                    if question.info
                                      .alert-button(onclick=`showInfo("${question.info}")`)              
                                //- br
                                if question.type == "coords"                               
                                  input#coords(name = question.name type = "text" readonly placeholder = "Select a point on the map")  
                                else if question.type == "text"    
                                  if question.disabled
                                    input(name = question.name type = question.type readonly value = question.value  placeholder=question.placeholder)
                                  else
                                    input(name = question.name type = question.type value = question.value)
                                else if question.type == "radio" || question.type == "checkbox"
                                  each val, index in question.options                           
                                    if question.type == "radio"                                                                         
                                      if val == "Other"
                                        .other-radio-div
                                          input(type = question.type name = question.name id = question.name + "-" + index value = val checked = (val == (question.value!=null ? question.value[0] : null)))   
                                          input( style="margin-bottom:0!important; font-weight:bold;font-size:14px;" name = question.name type = "text" value= (question.value!=null ? question.value[1] : null) placeholder = "Other")                  
                                      else  
                                        input(type = question.type name = question.name id = question.name + "-" + index value = val checked = (val == (question.value!=null ? question.value[0] : null)))                                                                                                                    
                                    else
                                      input(type = question.type name = question.name id = question.name + "-" + index value = val checked = (question.value != null && question.value.indexOf(val) != -1))
                                    if val != "Other"
                                      label(for = question.name + "-" + index)= val
                                    br                    
                              .right-level-items
                                .level-item-right
                                  .comment-button(data-name = `${question.name}` data-email = `${email}`)
                                  .link-button(data-name = `${question.name}` data-email = `${email}`) 
                                  .chat-button(data-name = `${question.name}` data-email = `${email}`)                   
                          br
                          br
                  br
          .button-level

            if sectionData.header=="fill-in-form" 
              input.button.is-black(style="width:40%" id ="edit-previous-button" name = "edit-previous-button" type = "button" value = "Edit a previous settlement")
              input.button.is-black(id="start-button" style="width:100%" type="submit" value="Start",required)
            else        
              input.button.is-dark(style="position:relative;left:70%;" type="submit" value="Submit" )


      .right-column#right-sidebar
        if sectionData.header=="fill-in-form" 
          section
            if map
              #map
                #basemaps-wrapper
                  select#basemaps
                    option(value="Streets") Streets
                    option(value="ImageryClarity") ImageryClarity

        else 
          #info.box(style = "display:none;")
            h1.heading Info
            p
          #comment.box(style = "display:none;")
            h1.heading Comment
            p.subtitle.is-size-6 Add some clarifying information about this question, if necessary.
            input.text(type = "text") 
            p.help.is-success Successfully saved comment!
            input.button.is-black(type="submit" value="Save Comment" onclick = "saveComment()" data-url = url)
          #link.box(style = "display:none;")
            h1.heading Link
            p.subtitle.is-size-6 Add a link with supporting information, if necessary.
            input.text(type = "text") 
            p.help.is-success Successfully saved link!
            p.help.is-danger Please enter a valid link
            input.button.is-black(type="submit" value="Save Link" onclick = "saveLink()" data-url = url)
          #chat.box(style = "display:none;")
            h1.heading Image
            p.subtitle.is-size-6 Add an image with supporting information, if necessary.
            input.text(type = "text") 
            p.help.is-success Successfully saved link!
            p.help.is-danger Please enter a valid link
            input.button.is-black(type="submit" value="Save Link" onclick = "" data-url = url)
    if comments && links 
      script.
        let comments = !{JSON.stringify(comments)};
        let links = !{JSON.stringify(links)};

    .form-footer(style="background-color:#242424;color:white;height:4rem;display:flex;align-items:center;flex-direction:row")
      .footer-copy-right(style="margin:28px;")
        <hr style="height:2px;background-color:#242424;margin:2px;color:white">
          p &copy; City Science 2020

      
    script(src = "/src/js/form.js")

    //- script(type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit")

    
