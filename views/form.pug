doctype html
html 
  head 
    include includes/head.pug
    title The Power of Without
    link(rel='stylesheet', href='https://unpkg.com/leaflet@1.6.0/dist/leaflet.css')
    script(src='https://unpkg.com/leaflet@1.6.0/dist/leaflet.js')
    link(rel="stylesheet" href="/dist/css/form.css")
  body 
    - let activeTab = 2;

    include includes/nav-black.pug
    

    #modal-div.modal-container
      .modal-description
        p #{modalData.description}
      .modal-items-description
        each icon in modalData.icons
          .modal-item 
            .modal-icon(style=`background-image:url(${icon.image})`)
            .modal-icon-description          
              p #{icon.description}             
      input(type="submit" value="Continue" id="continue-button")

    .columns.is-variable.is-8

      if sectionData.header=="update-settlement"     
        #sidebar.nav-column
          .nav
            a.active(onclick = "goToSection(1)") Site
            br
            a(onclick = "goToSection(2)") Architecture
            br
            a(onclick = "goToSection(3)") Population
        
      .middle-column#content         
        form(action = url method = "POST")
          //- Autofill questions from JSON object passed
          if sectionData.header=="fill-in-form"                     
                .fill-in-row
                  each question, line in sectionData.sections
                    if line < 2
                      .fill-in-level-row-item
                        .fill-in-level-row-title                  
                          label(for = question.name + "-" + index)=question.label
                        br
                        .fill-in-level-row-input
                          if question.type == "text"    
                            if question.disabled
                              input(name = question.name type = question.type readonly value = question.value)
                            else
                              input(name = question.name type = question.type placeholder = question.value)                        
                          
                each question, line in sectionData.sections 
                  if line>1
                    br
                    .fill-in-level-row-item
                      .fill-in-level-row-title                  
                        label(for = question.name + "-" + index)=question.label
                      br
                      .fill-in-level-row-input
                        if question.type == "coords"
                          input#coords(name = question.name type = "text" readonly placeholder = question.value)    
                        else if question.type == "text"    
                          if question.disabled
                            input(name = question.name type = question.type readonly value = question.value)
                          else
                            input(name = question.name type = question.type placeholder = question.value)
                        else if question.type == "radio" || question.type == "checkbox"
                          each val, index in question.options
                            if question.type == "radio"
                              input(type = question.type name = question.name id = question.name + "-" + index value = val checked = (val == question.value))
                            else 
                              input(type = question.type name = question.name id = question.name + "-" + index value = val checked = (question.value != null && question.value.indexOf(val) != -1))
                            label( style="font-size:0.8rem" for = question.name + "-" + index)= val
                            br
                        else if question.type == "range"
                          .range
                            label(for = question.name)= question.options[0]
                            input(type = "range" min = "1" max = `${question.options.length}` value = (question.value ? question.value : null) name = question.name id = question.name)
                            label(for = question.name)= question.options[question.options.length - 1]
                          br


          else if sectionData.header=="update-settlement"
            each section, index in sectionData.sections
              br
              section(class = (index == 0 ? "" : "is-hidden"))                 
                each category, index in section.subsections        
                  .level-category
                    .level-left-category 
                      .level-item-header
                        label(for = "")= category.label               
                      .level-middle
                        each question, j in category.questions
                          .level-item-question
                            .left-level-items
                              .level-item-left
                                .label
                                  label(for = "hilz")= question.name 
                                .question-info
                                  if question.info
                                    //- .info-button.level-item(data-label = `${category.label}` data-info = `${question.info}`)
                                    //- i.fas.fa-info-circle
                                    .alert-button              
                              br
                              if question.type == "coords"                               
                                input#coords(name = question.name type = "text" readonly placeholder = "Select a point on the map")  
                              else if question.type == "text"    
                                if question.disabled
                                  input(name = question.name type = question.type readonly value = question.value)
                                else
                                  input(name = question.name type = question.type value = question.value)
                              else if question.type == "radio" || question.type == "checkbox"
                                each val, index in question.options                           
                                  if question.type == "radio"                                                                         
                                    if val == "Other"
                                      .other-radio-div
                                        input(type = question.type name = question.name id = question.name + "-" + index value = val checked = (val == question.value)) 
                                        input( style="margin-bottom:0!important; font-weight:bold; color:#242424;font-size:14px;" name = question.name type = "text" value = "Other")                  
                                    else  
                                      input(type = question.type name = question.name id = question.name + "-" + index value = val checked = (val == question.value))                                                                                                                    
                                  else
                                    input(type = question.type name = question.name id = question.name + "-" + index value = val checked = (question.value != null && question.value.indexOf(val) != -1))
                                  if val != "Other"
                                    label(for = question.name + "-" + index)= val
                                  br
                              else if question.type == "range"
                                .range
                                  label(for = question.name)= question.options[0]
                                  input(type = "range" min = "1" max = `${question.options.length}` value = (question.value ? question.value : null) name = question.name id = question.name)
                                  label(for = question.name)= question.options[question.options.length - 1]
                                br
                              else if question.type == "c"
                                  
                              br

                            .right-level-items
                              .level-item-right
                                .chat-button(data-name = `${question.name}` data-email = `${email}`)
                                  //- i.fa-comment.fas
                                .link-button(data-name = `${question.name}` data-email = `${email}`)
                                  //- i.fas.fa-link
                                .comment-button(data-name = `${question.name}` data-email = `${email}`)
                                  //- i.fa-comment.fas
          .button-level
            input(style="width:40%"  name = "edit-previous-button" type = "text" value = "Edit a previous settlement")
            input.button.is-black(id="start-button" style="width:40%" type="submit" value="Start")


            
            

              //- if index > 0
              //-   a.button.is-light(onclick = "goToSection(" + (index) + ")") Previous Section
                              
              //- if inde == sections.length - 1
                
              //- else 
              //-   input.button.is-dark(type="submit" value="Save")
              //-   a.button.is-black(onclick = "goToSection(" + (index + 2) + ")") Next Section


      .right-column#right-sidebar
        if sectionData.header=="fill-in-form" 
          section
            if map
              #map
        else 
          #info.box(style = "display:none;")
            h1.heading Info
            p
          #comment.box(style = "display:none;")
            h1.heading Comment
            p.subtitle.is-size-6 Add some clarifying information about this question, if necessary.
            input.text(type = "text") 
            p.help.is-success Successfully saved comment!
            input.button.is-black(type="submit" value="Save Comment" onclick = "saveComment()" data-url = url)
          #link.box(style = "display:none;")
            h1.heading Link
            p.subtitle.is-size-6 Add a link with supporting information, if necessary.
            input.text(type = "text") 
            p.help.is-success Successfully saved link!
            p.help.is-danger Please enter a valid link
            input.button.is-black(type="submit" value="Save Link" onclick = "saveLink()" data-url = url)
    if comments && links 
      script.
        let comments = !{JSON.stringify(comments)};
        let links = !{JSON.stringify(links)};
    script(src = "/src/js/form.js")
    //- script(type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit")

    
